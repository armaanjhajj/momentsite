-- Migration: Refactor to proper org_members table
-- This replaces the JSONB organizations field and is_org boolean with proper relational tables

-- ============================================================================
-- 1. Create organizations table
-- ============================================================================
CREATE TABLE IF NOT EXISTS public.organizations (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL,
  bio text,
  avatar_url text,
  is_verified boolean DEFAULT false,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

CREATE INDEX IF NOT EXISTS organizations_name_idx ON public.organizations (name);

-- ============================================================================
-- 2. Create org_members table
-- ============================================================================
CREATE TABLE IF NOT EXISTS public.org_members (
  org_id uuid NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,
  member_id uuid NOT NULL REFERENCES public.profiles(user_id) ON DELETE CASCADE,
  role text NOT NULL DEFAULT 'member' CHECK (role IN ('owner', 'admin', 'member')),
  created_at timestamptz DEFAULT now(),
  PRIMARY KEY (org_id, member_id)
);

CREATE INDEX IF NOT EXISTS org_members_org_idx ON public.org_members (org_id);
CREATE INDEX IF NOT EXISTS org_members_member_idx ON public.org_members (member_id);
CREATE INDEX IF NOT EXISTS org_members_role_idx ON public.org_members (role);

-- ============================================================================
-- 3. Migrate existing data
-- ============================================================================

-- Migrate orgs from profiles where is_org = true
INSERT INTO public.organizations (id, name, bio, avatar_url, is_verified, created_at, updated_at)
SELECT 
  p.user_id as id,
  COALESCE(TRIM(p.first_name || ' ' || p.last_name), 'Organization') as name,
  p.bio,
  p.avatar_url,
  COALESCE(p.is_verified, false) as is_verified,
  p.created_at,
  p.updated_at
FROM public.profiles p
WHERE p.is_org = true
ON CONFLICT (id) DO UPDATE SET
  name = EXCLUDED.name,
  bio = EXCLUDED.bio,
  avatar_url = EXCLUDED.avatar_url,
  is_verified = EXCLUDED.is_verified,
  updated_at = EXCLUDED.updated_at;

-- Make each org profile the owner of their own org
INSERT INTO public.org_members (org_id, member_id, role, created_at)
SELECT 
  p.user_id as org_id,
  p.user_id as member_id,
  'owner' as role,
  p.created_at
FROM public.profiles p
WHERE p.is_org = true
ON CONFLICT (org_id, member_id) DO UPDATE SET role = 'owner';

-- Migrate JSONB organizations array to org_members
DO $$
DECLARE
  profile_rec RECORD;
  org_uuid uuid;
BEGIN
  FOR profile_rec IN 
    SELECT user_id, organizations
    FROM public.profiles
    WHERE organizations IS NOT NULL 
      AND jsonb_array_length(organizations) > 0
      AND is_org IS NOT TRUE  -- Don't process org profiles themselves
  LOOP
    FOR org_uuid IN 
      SELECT (jsonb_array_elements_text(profile_rec.organizations))::uuid
    LOOP
      -- Only insert if the org exists in organizations table
      IF EXISTS (SELECT 1 FROM public.organizations WHERE id = org_uuid) THEN
        INSERT INTO public.org_members (org_id, member_id, role, created_at)
        VALUES (org_uuid, profile_rec.user_id, 'member', now())
        ON CONFLICT (org_id, member_id) DO NOTHING;
      END IF;
    END LOOP;
  END LOOP;
END $$;

-- ============================================================================
-- 4. Enable RLS and create policies
-- ============================================================================

-- RLS for organizations
ALTER TABLE public.organizations ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Anyone can view organizations" ON public.organizations;
CREATE POLICY "Anyone can view organizations"
  ON public.organizations
  FOR SELECT
  TO authenticated
  USING (true);

DROP POLICY IF EXISTS "Org admins can update their org" ON public.organizations;
CREATE POLICY "Org admins can update their org"
  ON public.organizations
  FOR UPDATE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.org_members
      WHERE org_members.org_id = organizations.id
        AND org_members.member_id = auth.uid()
        AND org_members.role IN ('admin', 'owner')
    )
  );

-- RLS for org_members
ALTER TABLE public.org_members ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Members can view memberships" ON public.org_members;
CREATE POLICY "Members can view memberships"
  ON public.org_members
  FOR SELECT
  TO authenticated
  USING (
    member_id = auth.uid() 
    OR EXISTS (
      SELECT 1 FROM public.org_members om2
      WHERE om2.org_id = org_members.org_id
        AND om2.member_id = auth.uid()
        AND om2.role IN ('admin', 'owner')
    )
  );

DROP POLICY IF EXISTS "Org admins can manage members" ON public.org_members;
CREATE POLICY "Org admins can manage members"
  ON public.org_members
  FOR ALL
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.org_members om2
      WHERE om2.org_id = org_members.org_id
        AND om2.member_id = auth.uid()
        AND om2.role IN ('admin', 'owner')
    )
  );

-- ============================================================================
-- 5. Update RPC functions
-- ============================================================================

-- Approve request: adds member to org_members table
CREATE OR REPLACE FUNCTION public.approve_org_request(req_id uuid)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_org uuid;
  v_user uuid;
BEGIN
  -- Get request details
  SELECT organization_id, user_id
  INTO v_org, v_user
  FROM public.organization_requests
  WHERE id = req_id
  FOR UPDATE;

  IF NOT FOUND THEN
    RAISE EXCEPTION 'request not found';
  END IF;

  -- Check if current user is admin/owner of the org
  IF NOT EXISTS (
    SELECT 1 FROM public.org_members
    WHERE org_id = v_org 
      AND member_id = auth.uid()
      AND role IN ('admin', 'owner')
  ) THEN
    RAISE EXCEPTION 'not authorized';
  END IF;

  -- Update request status
  UPDATE public.organization_requests
    SET status = 'approved', updated_at = now()
  WHERE id = req_id;

  -- Insert into org_members
  INSERT INTO public.org_members (org_id, member_id, role, created_at)
  VALUES (v_org, v_user, 'member', now())
  ON CONFLICT (org_id, member_id) DO NOTHING;
END;
$$;

GRANT EXECUTE ON FUNCTION public.approve_org_request(uuid) TO authenticated;

-- Reject request
CREATE OR REPLACE FUNCTION public.reject_org_request(req_id uuid)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_org uuid;
BEGIN
  SELECT organization_id INTO v_org
  FROM public.organization_requests
  WHERE id = req_id;

  IF NOT FOUND THEN
    RAISE EXCEPTION 'request not found';
  END IF;

  -- Check authorization
  IF NOT EXISTS (
    SELECT 1 FROM public.org_members
    WHERE org_id = v_org 
      AND member_id = auth.uid()
      AND role IN ('admin', 'owner')
  ) THEN
    RAISE EXCEPTION 'not authorized';
  END IF;

  UPDATE public.organization_requests
    SET status = 'rejected', updated_at = now()
  WHERE id = req_id;
END;
$$;

GRANT EXECUTE ON FUNCTION public.reject_org_request(uuid) TO authenticated;

-- Revoke membership
CREATE OR REPLACE FUNCTION public.revoke_org_membership(req_id uuid)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  v_org uuid;
  v_user uuid;
BEGIN
  SELECT organization_id, user_id
  INTO v_org, v_user
  FROM public.organization_requests
  WHERE id = req_id
  FOR UPDATE;

  IF NOT FOUND THEN
    RAISE EXCEPTION 'request not found';
  END IF;

  -- Check authorization
  IF NOT EXISTS (
    SELECT 1 FROM public.org_members
    WHERE org_id = v_org 
      AND member_id = auth.uid()
      AND role IN ('admin', 'owner')
  ) THEN
    RAISE EXCEPTION 'not authorized';
  END IF;

  -- Remove from org_members
  DELETE FROM public.org_members
  WHERE org_id = v_org AND member_id = v_user;

  -- Update request status
  UPDATE public.organization_requests
    SET status = 'rejected', updated_at = now()
  WHERE id = req_id;
END;
$$;

GRANT EXECUTE ON FUNCTION public.revoke_org_membership(uuid) TO authenticated;

-- ============================================================================
-- 6. Update organization_requests RLS policies
-- ============================================================================

DROP POLICY IF EXISTS "Users can view own or org requests" ON public.organization_requests;
CREATE POLICY "Users can view own or org requests"
  ON public.organization_requests
  FOR SELECT
  TO authenticated
  USING (
    user_id = auth.uid() 
    OR EXISTS (
      SELECT 1 FROM public.org_members
      WHERE org_id = organization_requests.organization_id
        AND member_id = auth.uid()
        AND role IN ('admin', 'owner')
    )
  );

DROP POLICY IF EXISTS "Users can update org requests for their org" ON public.organization_requests;
CREATE POLICY "Users can update org requests for their org"
  ON public.organization_requests
  FOR UPDATE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM public.org_members
      WHERE org_id = organization_requests.organization_id
        AND member_id = auth.uid()
        AND role IN ('admin', 'owner')
    )
  );

-- ============================================================================
-- 7. Mark old columns as deprecated
-- ============================================================================

COMMENT ON COLUMN public.profiles.is_org IS 'DEPRECATED: Use organizations table instead';
COMMENT ON COLUMN public.profiles.organizations IS 'DEPRECATED: Use org_members table instead';
